<?php

namespace Application\Controller;


use Application\Model\UserInterface;
use Zend\Authentication\AuthenticationService;
use Zend\Mvc\Controller\AbstractActionController;
use Zend\Mvc\MvcEvent;
use Zend\View\Model\ViewModel;



class DashboardController extends AbstractActionController
{
    private $authService;
    private $_username;
    private $_interface;
    private $_user;

    //DI Database
    public function __construct(UserInterface $user_interface)
    {
        $this->authService = new AuthenticationService;
        $this->_username = $this->authService->getIdentity();
        $this->_interface = $user_interface;
        $user = $this->_interface->getUserByName($this->_username);

        foreach($user as $userRole){
            $this->_user = $userRole['role'];
        }
    }

    public function onDispatch(MvcEvent $e)
    {
        $this->_username = $this->authService->getIdentity();
        if ($this->authService->getIdentity() != true){
            $this->redirect()->toRoute('home');
        }
        $username = $this->_interface->getUserByName($this->_username);
        //check role of identity to verify the existing user to the dashboard
        foreach($username as $userRole){
            $role = $userRole['role'];
            if($role==='Waitress'){
                $this->redirect()->toRoute('waitress');
            }
            elseif($role==='Kitchen'){
                $this->redirect()->toRoute('kitchen');
            }
        }
        return parent::onDispatch($e); // TODO: Change the autogenerated stub
    }

    public function indexAction()
    {
        $getUsers = $this->_interface->getAllUsers();


        return new ViewModel([
            'allUsers'=>$getUsers,
        ]);
    }

    public function userAction()
    {
        return new ViewModel();
    }

    public function menuAction()
    {
        return new ViewModel();
    }
}